generator client {
  provider = "prisma-client-js"
  output   = "../apps/api/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  name            String?
  tableNumber     Int               @map("table_number")
  sessionId       String            @map("session_id")
  waiterId        String?           @map("waiter_id")
  createdAt       DateTime          @default(now()) @map("created_at")
  restaurantId    String            @map("restaurant_id")
  chatMessages    ChatMessage[]
  orders          Order[]
  requests        Request[]
  serviceAnalysis ServiceAnalysis[]
  restaurant      Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  waiter          Waiter?           @relation(fields: [waiterId], references: [id])

  @@index([sessionId])
  @@index([restaurantId])
  @@index([waiterId])
  @@index([waiterId, createdAt])
  @@index([tableNumber])
  @@index([createdAt])
  @@index([waiterId, sessionId])
  @@index([restaurantId, sessionId])
  @@index([restaurantId, tableNumber])
  @@map("users")
}

model ClosedSession {
  id           String     @id @default(uuid())
  name         String?
  tableNumber  Int        @map("table_number")
  sessionId    String     @map("session_id")
  waiterId     String?    @map("waiter_id")
  createdAt    DateTime   @map("created_at")
  closedAt     DateTime   @default(now()) @map("closed_at")
  userId       String     @map("user_id")
  restaurantId String     @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  waiter       Waiter?    @relation(fields: [waiterId], references: [id])

  @@index([restaurantId])
  @@index([createdAt])
  @@index([closedAt])
  @@map("closed_sessions")
}

model Request {
  id          String        @id @default(uuid())
  userId      String        @map("user_id")
  tableNumber Int           @map("table_number")
  sessionId   String        @map("session_id")
  content     String
  status      RequestStatus @default(New)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  user        User          @relation(fields: [userId], references: [id])
  logs        RequestLog[]

  @@index([tableNumber, status])
  @@index([userId])
  @@index([sessionId])
  @@map("requests")
}

model RequestLog {
  id        String   @id @default(uuid())
  /// parent request -------------------------------------------------------
  requestId String   @map("request_id")
  /// what happened --------------------------------------------------------
  action    String
  dateTime  DateTime @default(now()) @map("date_time")
  actor     String   @default("system")
  request   Request  @relation(fields: [requestId], references: [id])

  @@index([requestId])
  @@index([dateTime])
  @@index([actor])
  @@map("requests_log")
}

model Order {
  id          String      @id @default(uuid())
  tableNumber Int         @map("table_number")
  sessionId   String      @map("session_id")
  userId      String?     @map("user_id")
  status      OrderStatus @default(New)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  orderItems  OrderItem[]
  user        User?       @relation(fields: [userId], references: [id])
  logs        OrderLog[]

  @@index([tableNumber, sessionId])
  @@index([userId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id                  String      @id @default(uuid())
  orderId             String      @map("order_id")
  menuItemId          String      @map("menu_item_id")
  quantity            Int         @default(1)
  price               Decimal
  status              OrderStatus @default(New)
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  selectedExtras      Json?       @map("selected_extras")
  selectedOptions     Json?       @map("selected_options")
  specialInstructions String?     @map("special_instructions")
  menuItem            MenuItem    @relation(fields: [menuItemId], references: [id])
  order               Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([menuItemId])
  @@map("order_items")
}

model OrderLog {
  id       String   @id @default(uuid())
  /// parent order ------------------------------------------------------
  orderId  String   @map("order_id")
  /// what happened --------------------------------------------------------
  action   String
  actor    String   @default("system")
  dateTime DateTime @default(now()) @map("date_time")
  order    Order    @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([dateTime])
  @@index([actor])
  @@map("orders_log")
}

model ChatMessage {
  id              String        @id @default(uuid())
  userId          String        @map("user_id")
  role            ChatRole
  content         String
  createdAt       DateTime      @default(now()) @map("created_at")
  parentMessageId String?       @map("parent_message_id")
  parentMessage   ChatMessage?  @relation("MessageThread", fields: [parentMessageId], references: [id])
  childMessages   ChatMessage[] @relation("MessageThread")
  user            User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([parentMessageId])
  @@index([userId, parentMessageId])
  @@map("chat_messages")
}

model ServiceAnalysis {
  id          String   @id @default(uuid())
  sessionId   String   @map("session_id")
  userId      String   @map("user_id")
  waiterId    String   @map("waiter_id")
  rating      Int
  analysis    Json
  createdAt   DateTime @default(now()) @map("created_at")
  serviceType String   @default("request") @map("service_type")
  user        User     @relation(fields: [userId], references: [id])
  waiter      Waiter   @relation(fields: [waiterId], references: [id])

  @@index([sessionId])
  @@index([userId])
  @@index([waiterId])
  @@index([createdAt])
  @@index([serviceType])
  @@map("service_analysis")
}

model Tenant {
  id          String       @id @default(uuid())
  name        String
  phone       String?
  email       String?
  address     String?
  status      String       @default("Active")
  code        String?      // OTP code for authentication
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  restaurants Restaurant[]

  @@index([status])
  @@index([email])
  @@map("tenants")
}

model Restaurant {
  id             String                 @id @default(uuid())
  tenantId       String                 @map("tenant_id")
  name           String
  phone          String?
  email          String?
  location       String?
  address        String?
  status         String                 @default("Active")
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")
  closedSessions ClosedSession[]
  menuItems      MenuItem[]
  subscription   RestaurantSubscription?
  tenant         Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users          User[]
  waiters        Waiter[]

  @@index([tenantId])
  @@index([status])
  @@index([location])
  @@map("restaurants")
}

model RestaurantSubscription {
  id           String     @id @default(uuid())
  restaurantId String     @unique @map("restaurant_id")
  activeUntil  DateTime   @map("active_until")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([activeUntil])
  @@index([restaurantId])
  @@map("restaurant_subscriptions")
}

model MenuItem {
  id                String      @id @default(uuid())
  category          String?
  name              String
  description       String?
  image             String?
  price             Decimal
  status            String      @default("Active")
  video             String?
  served_info       String?     @map("served_info")
  available_options Json?       @map("available_options")
  available_extras  Json?       @map("available_extras")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  restaurantId      String      @map("restaurant_id")
  restaurant        Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems        OrderItem[]

  @@index([restaurantId])
  @@index([category])
  @@index([status])
  @@index([restaurantId, category])
  @@index([restaurantId, status])
  @@map("menu_items")
}

model Waiter {
  id              String            @id @default(uuid())
  name            String
  surname         String
  address         String?
  phone           String?           @unique
  email           String?           @unique
  tag_nickname    String            @map("tag_nickname")
  propic          String?
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  restaurantId    String            @map("restaurant_id")
  // Authentication fields
  code            String?           // OTP code for authentication
  userType        UserType          @default(waiter) @map("user_type")
  status          WaiterStatus      @default(Active)
  accessAccount   AccessUser?
  closedSessions  ClosedSession[]
  serviceAnalysis ServiceAnalysis[]
  users           User[]
  restaurant      Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  metrics         WaiterMetric[]

  @@index([restaurantId])
  @@index([restaurantId, email])
  @@index([email, userType])
  @@index([phone, userType])
  @@map("waiter")
}

model AccessUser {
  /// The waiter this credential belongs to (1-to-1)
  userId   String   @id @map("user_id")
  /// Credentials
  username String   @unique
  code     String?
  /// Role of this account (admin / waiter / manager)
  userType UserType @default(waiter)
  waiter   Waiter   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("access_users")
}

model WaiterMetric {
  id              String   @id @default(uuid())
  waiterId        String   @map("waiter_id")
  metricDate      DateTime @map("metric_date")
  openHandled     Int      @map("open_handled")
  avgResponseTime Float    @map("avg_response_time")
  ratingAvg       Float    @map("rating_avg")
  createdAt       DateTime @default(now()) @map("created_at")
  waiter          Waiter   @relation(fields: [waiterId], references: [id], onDelete: Cascade)

  @@index([waiterId])
  @@map("waiter_metrics")
}

model UserSessionLog {
  id        String   @id @default(uuid())
  sessionId String   @map("session_id")
  action    String   // e.g., "created_session", "joined_session", "closed_session", "transferred_session"
  dateTime  DateTime @default(now()) @map("date_time")
  actorId   String?  @map("actor_id") // ID of the waiter or user who performed the action
  actorType String?  @map("actor_type") // "waiter", "user", "system"
  details   Json?    // Additional details about the action (e.g., transfer details, previous waiter info)

  @@index([sessionId])
  @@index([sessionId, dateTime])
  @@index([actorId])
  @@index([actorType])
  @@index([dateTime])
  @@map("user_session_logs")
}

enum ChatRole {
  user
  assistant
  system
}

enum RequestStatus {
  New
  Acknowledged
  InProgress
  Completed
  OnHold
  Cancelled
  Done
}

enum OrderStatus {
  New
  Acknowledged
  InProgress
  Complete
  Delivered
  Paid
  Cancelled
  Rejected
}

enum SortOrder {
  asc
  desc
}

enum UserType {
  admin
  waiter
  manager
}

enum WaiterStatus {
  Active
  Inactive
}
