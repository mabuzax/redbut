// Prisma schema for the RedBut application – PostgreSQL edition

generator client {
  provider = "prisma-client-js"
  output   = "../apps/api/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* -------------------------------------------------------------------------- */
/*  GUEST (ANONYMOUS) USERS                                                   */
/* -------------------------------------------------------------------------- */

model User {
  id             String         @id @default(uuid())
  name           String?
  tableNumber    Int            @map("table_number")
  sessionId      String         @map("session_id")
  waiterId       String?        @map("waiter_id") // ID of assigned waiter
  createdAt      DateTime       @default(now()) @map("created_at")

  /* relations ------------------------------------------------------------- */
  requests         Request[]
  chatMessages     ChatMessage[]
  reviews          Review[]
  ratingsGiven     WaiterRating[] @relation("UserRatingAuthor")
  orders           Order[] // Relation to Orders placed by this user
  serviceAnalysis  ServiceAnalysis[]
  waiter           Waiter?        @relation(fields: [waiterId], references: [id]) // Relation to assigned waiter

  @@index([sessionId])
  @@map("users")
}

/* -------------------------------------------------------------------------- */
/*  CLOSED SESSIONS (for audit purposes)                                     */
/* -------------------------------------------------------------------------- */

model ClosedSession {
  id             String         @id @default(uuid())
  originalUserId String         @map("original_user_id") // Reference to original user ID
  name           String?
  tableNumber    Int            @map("table_number")
  sessionId      String         @map("session_id")
  waiterId       String?        @map("waiter_id") // ID of assigned waiter
  createdAt      DateTime       @map("created_at") // Original session creation time
  closedAt       DateTime       @default(now()) @map("closed_at") // When session was closed

  /* relations ------------------------------------------------------------- */
  waiter         Waiter?        @relation(fields: [waiterId], references: [id]) // Relation to assigned waiter

  @@index([createdAt])
  @@index([closedAt])
  @@map("closed_sessions")
}

/* -------------------------------------------------------------------------- */
/*  REQUESTS (buzz waiter / bill requests)                                    */
/* -------------------------------------------------------------------------- */

model Request {
  id          String        @id @default(uuid())
  userId      String        @map("user_id")
  tableNumber Int           @map("table_number")
  sessionId   String        @map("session_id") // Added for consistency with orders
  content     String
  status      RequestStatus @default(New)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  /* relations ------------------------------------------------------------- */
  user        User          @relation(fields: [userId], references: [id])
  logs        RequestLog[]

  @@index([tableNumber, status])
  @@index([userId])
  @@index([sessionId]) // Added index for session-based queries
  @@map("requests")
}

/* -------------------------------------------------------------------------- */
/*  STATUS TRANSITION CONFIGURATION                                           */
/* -------------------------------------------------------------------------- */

model RequestStatusConfig {
  id            String        @id @default(uuid())
  currentStatus RequestStatus
  targetStatus  RequestStatus
  userRole      String
  label         String
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@index([currentStatus])
  @@index([userRole])
  @@index([currentStatus, userRole])
  @@map("request_status_config")
}

/* -------------------------------------------------------------------------- */
/*  ORDER STATUS TRANSITION CONFIGURATION                                     */
/* -------------------------------------------------------------------------- */

model OrderStatusConfig {
  id            String      @id @default(uuid())
  currentStatus OrderStatus
  targetStatus  OrderStatus
  userRole      String
  label         String
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@index([currentStatus])
  @@index([userRole])
  @@index([currentStatus, userRole])
  @@map("order_status_config")
}

/* -------------------------------------------------------------------------- */
/*  REQUESTS LOG – audit trail of all request state changes                   */
/* -------------------------------------------------------------------------- */

model RequestLog {
  id        String   @id @default(uuid())

  /* parent request ------------------------------------------------------- */
  requestId String   @map("request_id")
  request   Request  @relation(fields: [requestId], references: [id])

  /* what happened -------------------------------------------------------- */
  action    String
  dateTime  DateTime @default(now()) @map("date_time")

  @@index([requestId])
  @@index([dateTime])
  @@map("requests_log")
}

/* -------------------------------------------------------------------------- */
/*  ORDERS                                                                    */
/* -------------------------------------------------------------------------- */

model Order {
  id          String      @id @default(uuid())
  tableNumber Int         @map("table_number")
  sessionId   String      @map("session_id") // For guest orders before user association
  userId      String?     @map("user_id")    // Optional: Link to a registered user
  status      OrderStatus @default(New)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  /* relations */
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orderItems  OrderItem[]

  @@index([tableNumber, sessionId])
  @@index([userId])
  @@index([status])
  @@map("orders")
}

/* -------------------------------------------------------------------------- */
/*  ORDER ITEMS                                                               */
/* -------------------------------------------------------------------------- */

model OrderItem {
  id          String      @id @default(uuid())
  orderId     String      @map("order_id")
  menuItemId  String      @map("menu_item_id")
  quantity    Int         @default(1)
  price       Decimal     // Price of the item at the time of order
  status      OrderStatus @default(New) // Status of the individual item, typically matches order status
  selectedOptions Json?   @map("selected_options") // JSON array of selected options
  selectedExtras Json?    @map("selected_extras")  // JSON array of selected extras
  specialInstructions String? @map("special_instructions") // Special cooking instructions
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem  MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@index([menuItemId])
  @@map("order_items")
}


/* -------------------------------------------------------------------------- */
/*  ENUMS                                                                     */
/* -------------------------------------------------------------------------- */

enum ChatRole {
  user
  assistant
  system
}

enum RequestStatus {
  New
  Acknowledged
  InProgress
  Completed
  OnHold
  Cancelled
  Done
}

enum OrderStatus {
  New          // Order created by customer, not yet seen by staff
  Acknowledged // Staff has seen the order
  InProgress   // Order is being prepared
  Complete     // Order preparation is complete
  Delivered    // Order has been delivered to the table
  Paid         // Order has been paid
  Cancelled    // Order was cancelled by customer or staff
  Rejected     // Order was rejected by customer after delivery
}

enum SortOrder {
  asc
  desc
}

/* -------------------------------------------------------------------------- */
/*  USER TYPES FOR ACCESS USERS                                              */
/* -------------------------------------------------------------------------- */

enum UserType {
  admin
  waiter
  manager
}

/* -------------------------------------------------------------------------- */
/*  CHAT MESSAGES                                                             */
/* -------------------------------------------------------------------------- */

model ChatMessage {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  role            ChatRole
  content         String
  parentMessageId String?  @map("parent_message_id") // Links AI responses to the user message that triggered them
  createdAt       DateTime @default(now()) @map("created_at")

  /* relations ------------------------------------------------------------- */
  user            User     @relation(fields: [userId], references: [id])
  parentMessage   ChatMessage? @relation("MessageThread", fields: [parentMessageId], references: [id])
  childMessages   ChatMessage[] @relation("MessageThread")

  @@index([userId])
  @@index([parentMessageId])
  @@index([userId, parentMessageId])
  @@map("chat_messages")
}

/* -------------------------------------------------------------------------- */
/*  SERVICE ANALYSIS                                                          */
/* -------------------------------------------------------------------------- */

model ServiceAnalysis {
  id        String   @id @default(uuid())
  sessionId String   @map("session_id")
  userId    String   @map("user_id")
  waiterId  String   @map("waiter_id")
  rating    Int      // 1-5 rating derived from analysis
  analysis  Json     // Full analysis data
  createdAt DateTime @default(now()) @map("created_at")

  /* relations ------------------------------------------------------------- */
  user      User     @relation(fields: [userId], references: [id])
  waiter    Waiter   @relation(fields: [waiterId], references: [id])

  @@index([sessionId])
  @@index([userId])
  @@index([waiterId])
  @@index([createdAt])
  @@map("service_analysis")
}

/* -------------------------------------------------------------------------- */
/*  MENU ITEMS                                                                */
/* -------------------------------------------------------------------------- */

model MenuItem {
  id                String  @id @default(uuid())
  category          String?
  name              String
  description       String?
  image             String?
  price             Decimal
  status            String  @default("Active") // e.g., Active, Inactive, OutOfStock
  video             String?
  served_info       String? @map("served_info")
  available_options Json?   @map("available_options")
  available_extras  Json?   @map("available_extras")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  /* relations */
  orderItems        OrderItem[] // Relation to order items featuring this menu item

  @@index([category])
  @@index([status])
  @@map("menu_items")
}

/* -------------------------------------------------------------------------- */
/*  WAITER-FACING TABLES                                                      */
/* -------------------------------------------------------------------------- */

model Review {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  rating    Int
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  /* relations ------------------------------------------------------------- */
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("reviews")
}

/* -------------------------------------------------------------------------- */
/*  STAFF (Waiter)                                                            */
/* -------------------------------------------------------------------------- */

model Waiter {
  id        String   @id @default(uuid())

  name      String
  surname   String
  address   String?
  phone     String?  @unique
  email     String   @unique
  tag_nickname String @map("tag_nickname")
  propic    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  /* waiter-centric analytics & feedback ----------------------------------- */
  metrics          WaiterMetric[]
  ratings          WaiterRating[]
  serviceAnalysis  ServiceAnalysis[]

  /* one-to-one credential record used for dashboard login */
  accessAccount AccessUser?

  /* relations to table allocations */
  tableAllocations TableAllocation[]

  /* relations to users assigned to this waiter */
  users     User[]
  closedSessions ClosedSession[]

  @@map("waiter")
}

/* -------------------------------------------------------------------------- */
/*  SHIFTS                                                                    */
/* -------------------------------------------------------------------------- */

model Shift {
  id        String   @id @default(uuid())
  date      DateTime // Stores the date of the shift (time part at midnight UTC for easy date querying)
  startTime DateTime @map("start_time") // Full start date and time
  endTime   DateTime @map("end_time")   // Full end date and time
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  /* relations */
  tableAllocations TableAllocation[]

  @@index([date])
  @@index([startTime])
  @@map("shifts")
}

/* -------------------------------------------------------------------------- */
/*  TABLE ALLOCATIONS                                                         */
/* -------------------------------------------------------------------------- */

model TableAllocation {
  id           String   @id @default(uuid())
  shiftId      String   @map("shift_id")
  tableNumbers Int[]    @map("table_numbers") // Array of table numbers
  waiterId     String   @map("waiter_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  /* relations */
  shift        Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  waiter       Waiter   @relation(fields: [waiterId], references: [id], onDelete: Cascade)

  @@index([shiftId])
  @@index([waiterId])
  @@index([shiftId, waiterId]) 
  @@map("table_allocations")
}


/* -------------------------------------------------------------------------- */
/*  ACCESS USERS – credentials for waiter dashboard login                     */
/* -------------------------------------------------------------------------- */

model AccessUser {
  /* The waiter this credential belongs to (1-to-1) */
  userId   String @id @map("user_id")
  waiter   Waiter @relation(fields: [userId], references: [id], onDelete: Cascade) 

  /* Credentials */
  username String @unique
  code     String?                     // OTP code for authentication (6 digits)

  /* Role of this account (admin / waiter / manager) */
  userType UserType @default(waiter)

  @@map("access_users")
}

/* -------------------------------------------------------------------------- */
/*  ANALYTICS PER WAITER (AI-generated)                                       */
/* -------------------------------------------------------------------------- */

model WaiterMetric {
  id              String   @id @default(uuid())
  waiterId        String   @map("waiter_id")
  metricDate      DateTime @map("metric_date")
  openHandled     Int      @map("open_handled")
  avgResponseTime Float    @map("avg_response_time")
  ratingAvg       Float    @map("rating_avg")
  createdAt       DateTime @default(now()) @map("created_at")

  /* relations ------------------------------------------------------------- */
  waiter          Waiter   @relation(fields: [waiterId], references: [id], onDelete: Cascade) 

  @@index([waiterId])
  @@map("waiter_metrics")
}

/* -------------------------------------------------------------------------- */
/*  RATING GIVEN BY A DINER TO A SPECIFIC WAITER                              */
/* -------------------------------------------------------------------------- */

model WaiterRating {
  id              String   @id @default(uuid())

  /* author (diner) */
  userId          String   @map("user_id")
  user            User     @relation("UserRatingAuthor", fields: [userId], references: [id], onDelete: Cascade) 

  /* target waiter */
  waiterId        String   @map("waiter_id")
  waiter          Waiter   @relation(fields: [waiterId], references: [id], onDelete: Cascade) 

  /* 1-5 metrics */
  friendliness    Int
  orderAccuracy   Int
  speed           Int
  attentiveness   Int
  knowledge       Int

  comment         String?
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([waiterId])
  @@map("waiter_rating")
}
