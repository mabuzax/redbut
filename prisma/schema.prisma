// Prisma schema for the RedBut application – PostgreSQL edition

generator client {
  provider = "prisma-client-js"
  output   = "../apps/api/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* -------------------------------------------------------------------------- */
/*  GUEST (ANONYMOUS) USERS                                                   */
/* -------------------------------------------------------------------------- */

model User {
  id             String         @id @default(uuid())
  name           String?
  tableNumber    Int            @map("table_number")
  sessionId      String         @map("session_id")
  createdAt      DateTime       @default(now()) @map("created_at")

  /* relations ------------------------------------------------------------- */
  requests       Request[]
  chatMessages   ChatMessage[]
  reviews        Review[]
  ratingsGiven   WaiterRating[] @relation("UserRatingAuthor")

  @@index([sessionId])
  @@map("users")
}

/* -------------------------------------------------------------------------- */
/*  REQUESTS (buzz waiter / bill requests)                                    */
/* -------------------------------------------------------------------------- */

model Request {
  id          String        @id @default(uuid())
  userId      String        @map("user_id")
  tableNumber Int           @map("table_number")
  content     String
  status      RequestStatus @default(New)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  /* relations ------------------------------------------------------------- */
  user        User          @relation(fields: [userId], references: [id])
  logs        RequestLog[]

  @@index([tableNumber, status])
  @@index([userId])
  @@map("requests")
}

/* -------------------------------------------------------------------------- */
/*  REQUESTS LOG – audit trail of all request state changes                   */
/* -------------------------------------------------------------------------- */

model RequestLog {
  id        String   @id @default(uuid())

  /* parent request ------------------------------------------------------- */
  requestId String   @map("request_id")
  request   Request  @relation(fields: [requestId], references: [id])

  /* what happened -------------------------------------------------------- */
  action    String
  dateTime  DateTime @default(now()) @map("date_time")

  @@index([requestId])
  @@index([dateTime])
  @@map("requests_log")
}

/* -------------------------------------------------------------------------- */
/*  ORDERS (items added to “My Bill”)                                         */
/* -------------------------------------------------------------------------- */

model Order {
  id          String   @id @default(uuid())
  tableNumber Int      @map("table_number")
  sessionId   String   @map("session_id")
  item        String
  price       Decimal  @map("item_price")            // ← Decimal suits currency
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([tableNumber, sessionId])
  @@map("orders")
}

/* -------------------------------------------------------------------------- */
/*  ENUMS                                                                     */
/* -------------------------------------------------------------------------- */

enum ChatRole {
  user
  assistant
  system
}

enum RequestStatus {
  New
  Acknowledged
  InProgress
  Completed
  OnHold
  Cancelled
  Done
}

enum SortOrder {
  asc
  desc
}

/* -------------------------------------------------------------------------- */
/*  USER TYPES FOR ACCESS USERS                                              */
/* -------------------------------------------------------------------------- */

enum UserType {
  admin
  waiter
  manager
}

/* -------------------------------------------------------------------------- */
/*  CHAT MESSAGES                                                             */
/* -------------------------------------------------------------------------- */

model ChatMessage {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  role      ChatRole
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  /* relations ------------------------------------------------------------- */
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("chat_messages")
}

/* -------------------------------------------------------------------------- */
/*  MENU ITEMS                                                                */
/* -------------------------------------------------------------------------- */

model MenuItem {
  id                String  @id @default(uuid())
  category          String?
  name              String
  description       String?
  image             String?
  price             Decimal
  status            String  @default("Active")
  video             String?
  served_info       String? @map("served_info")
  available_options Json?   @map("available_options")
  available_extras  Json?   @map("available_extras")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([category])
  @@index([status])
  @@map("menu_items")
}

/* -------------------------------------------------------------------------- */
/*  WAITER-FACING TABLES                                                      */
/* -------------------------------------------------------------------------- */

model Review {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  rating    Int
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  /* relations ------------------------------------------------------------- */
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("reviews")
}

/* -------------------------------------------------------------------------- */
/*  STAFF (Waiter)                                                            */
/* -------------------------------------------------------------------------- */

model Waiter {
  id        String   @id @default(uuid())

  name      String
  surname   String
  address   String?
  phone     String?  @unique
  email     String   @unique
  tag_nickname String @map("tag_nickname")
  propic    String?
  createdAt DateTime @default(now()) @map("created_at")

  /* waiter-centric analytics & feedback ----------------------------------- */
  metrics   WaiterMetric[]
  ratings   WaiterRating[]

  /* one-to-one credential record used for dashboard login */
  accessAccount AccessUser?

  @@map("waiter")
}

/* -------------------------------------------------------------------------- */
/*  ACCESS USERS – credentials for waiter dashboard login                     */
/* -------------------------------------------------------------------------- */

model AccessUser {
  /* The waiter this credential belongs to (1-to-1) */
  userId   String @id @map("user_id")
  waiter   Waiter @relation(fields: [userId], references: [id])

  /* Credentials */
  username String @unique
  password String                      // default handled in application logic

  /* Role of this account (admin / waiter / manager) */
  userType UserType @default(waiter)

  @@map("access_users")
}

/* -------------------------------------------------------------------------- */
/*  ANALYTICS PER WAITER (AI-generated)                                       */
/* -------------------------------------------------------------------------- */

model WaiterMetric {
  id              String   @id @default(uuid())
  waiterId        String   @map("waiter_id")
  metricDate      DateTime @map("metric_date")
  openHandled     Int      @map("open_handled")
  avgResponseTime Float    @map("avg_response_time")
  ratingAvg       Float    @map("rating_avg")
  createdAt       DateTime @default(now()) @map("created_at")

  /* relations ------------------------------------------------------------- */
  waiter          Waiter   @relation(fields: [waiterId], references: [id])

  @@index([waiterId])
  @@map("waiter_metrics")
}

/* -------------------------------------------------------------------------- */
/*  RATING GIVEN BY A DINER TO A SPECIFIC WAITER                              */
/* -------------------------------------------------------------------------- */

model WaiterRating {
  id              String   @id @default(uuid())

  /* author (diner) */
  userId          String   @map("user_id")
  user            User     @relation("UserRatingAuthor", fields: [userId], references: [id])

  /* target waiter */
  waiterId        String   @map("waiter_id")
  waiter          Waiter   @relation(fields: [waiterId], references: [id])

  /* 1-5 metrics */
  friendliness    Int
  orderAccuracy   Int
  speed           Int
  attentiveness   Int
  knowledge       Int

  comment         String?
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([waiterId])
  @@map("waiter_rating")
}
